;;; -*- mode:emacs-lisp coding:utf-8 -*-
;;; Time-stamp: <2013-05-24 00:41:08 scinart>
;;; Date-Created: 2013-05-24 Friday 00:18:50
;;; Code:
(global-set-key (kbd "M-a") 'backward-sentence)
(global-set-key (kbd "M-b") 'backward-word)
(global-set-key (kbd "M-e") 'forward-sentence)
(global-set-key (kbd "M-f") 'forward-word)
(global-set-key (kbd "M-l") 'downcase-word)
(global-set-key (kbd "M-t") 'transpose-words)
(global-set-key (kbd "M-u") 'upcase-word)
(global-set-key (kbd "M-v") 'scroll-down-command)
(global-set-key (kbd "M-w") 'kill-ring-save)
(global-set-key (kbd "M-x") 'execute-extended-command)
(global-set-key (kbd "M-z") 'zap-to-char)
(global-set-key (kbd "M-,") 'tags-loop-continue)
(global-set-key (kbd "M-.") 'find-tag)
(global-set-key (kbd "M-<") 'beginning-of-buffer)
(global-set-key (kbd "M->") 'end-of-buffer)
(global-set-key (kbd "M-@") 'mark-word)
(global-set-key (kbd "M-&") 'async-shell-command)
(global-set-key (kbd "M-=") 'count-words-region)
(global-set-key (kbd "M-%") 'query-replace)
(global-set-key (kbd "C-f") 'forward-char)
(global-set-key (kbd "C-b") 'backward-char)
(global-set-key (kbd "C-n") 'next-line)
(global-set-key (kbd "C-p") 'previous-line)
(global-set-key (kbd "C-a") 'beginning-of-visual-line)
(global-set-key (kbd "C-e") 'end-of-visual-line)
(global-set-key (kbd "C-v") 'scroll-up-command)
(global-set-key (kbd "C-x C-e") 'eval-last-sexp)
(global-set-key (kbd "C-x C-l") 'downcase-region)
(global-set-key (kbd "C-x C-n") 'set-goal-column)
(global-set-key (kbd "C-x C-s") 'save-buffer)
(global-set-key (kbd "C-x C-u") 'upcase-region)
(global-set-key (kbd "C-x C-x") 'exchange-point-and-mark)
(global-set-key (kbd "C-x C-z") 'suspend-frame)
(global-set-key (kbd "C-x +") 'balance-windows)
(global-set-key (kbd "C-x -") 'shrink-window-if-larger-than-buffer)
(global-set-key (kbd "C-x 0") 'delete-window)
(global-set-key (kbd "C-x 1") 'delete-other-windows)
(global-set-key (kbd "C-x 2") 'split-window-vertically)
(global-set-key (kbd "C-x 3") 'split-window-horizontally)
(global-set-key (kbd "C-x a g") 'add-global-abbrev)
(global-set-key (kbd "C-x a i g") 'inverse-add-global-abbrev)
(global-set-key (kbd "C-x a i l") 'inverse-add-mode-abbrev)
(global-set-key (kbd "C-x a l") 'add-mode-abbrev)
(global-set-key (kbd "C-x e") 'kmacro-end-and-call-macro)
(global-set-key (kbd "C-x h") 'mark-whole-buffer)
(global-set-key (kbd "C-x r +") 'increment-register)
(global-set-key (kbd "C-x r b") 'bookmark-jump)
(global-set-key (kbd "C-x r c") 'clear-rectangle)
(global-set-key (kbd "C-x r d") 'delete-rectangle)
(global-set-key (kbd "C-x r i") 'insert-register)
(global-set-key (kbd "C-x r j") 'jump-to-register)
(global-set-key (kbd "C-x r k") 'kill-rectangle)
(global-set-key (kbd "C-x r l") 'bookmark-bmenu-list)
(global-set-key (kbd "C-x r m") 'bookmark-set)
(global-set-key (kbd "C-x r n") 'number-to-register)
(global-set-key (kbd "C-x r r") 'copy-rectangle-to-register)
(global-set-key (kbd "C-x r s") 'copy-to-register)
(global-set-key (kbd "C-x r t") 'string-rectangle)
(global-set-key (kbd "C-x r y") 'yank-rectangle)
(global-set-key (kbd "C-x u") 'undo)
(global-set-key (kbd "C-x z") 'repeat)
(global-set-key (kbd "C-x <C-left>") 'previous-buffer)
(global-set-key (kbd "C-x <C-right>") 'next-buffer)
(global-set-key (kbd "C-x <left>") 'previous-buffer)
(global-set-key (kbd "C-x <right>") 'next-buffer)
(global-set-key (kbd "C-x 5 2") 'make-frame-command)
(global-set-key (kbd "C-x C-@") 'pop-global-mark)
(global-set-key (kbd "C-M-v") 'scroll-other-window)
(global-set-key (kbd "C-M-S-v") 'scroll-other-window-down)
(set-register ?i '(file . "~/.emacs.d/init.el"))
(set-register ?e '(file . "~/.emacs.d/emacs-note.org"))
(set-register ?o '(file . "~/.emacs.d/"))
(set-register ?a '(file . "D:/My Document/"))
(set-register ?u '(file . "~/.emacs.d/emacs-shortcuts.org"))
(set-register ?p '(file . "d:/pro/emacs-24.1/site-lisp/"))
(set-register ?y '(file . "d:/pro/emacs-24.1/bin"))
(set-register ?m '(file . "~/.emacs.d/.mc-lists.el"))
(global-set-key (kbd "C-x r p") 'sci-push-register)
(global-set-key (kbd "C-x <return> o") 'open-this-buffer-in-explorer)
(global-set-key (kbd "C-<f7>") 'smart-compile)
(global-set-key (kbd "<f7>") 'smart-run)
(global-set-key (kbd "C-<f5>") 'smart-execute)
(global-set-key (kbd "C-x C-c") '(lambda ()
				   "in bindings.el, ask for sure when you exit."
				   (interactive)
				   (if (yy-or-n-p "Are you sure to exit Emacs?")
				       (save-buffers-kill-terminal))))
(global-set-key (kbd "C-c M-q") 'refresh-title)
(global-set-key (kbd "C-#") '(lambda () (interactive) (switch-skin 1)))
(global-set-key (kbd "C-`") '(lambda () (interactive) (switch-skin -1)))
(global-set-key (kbd "C-M-#") '(lambda () (interactive) (switch-skin-all 1)))
(global-set-key (kbd "C-M-`") '(lambda () (interactive) (switch-skin-all -1)))
(global-set-key (kbd "S-C-<left>") 'shrink-window-horizontally)
(global-set-key (kbd "S-C-<right>") 'enlarge-window-horizontally)
(global-set-key (kbd "S-C-<down>") 'shrink-window)
(global-set-key (kbd "S-C-<up>") 'enlarge-window)
(global-set-key (kbd "M-<up>") 'full-screen)
(global-set-key (kbd "M-<right>") 'right-half)
(global-set-key (kbd "M-<left>") 'left-half)
(global-set-key (kbd "M-<down>") 'down-half)
(global-set-key (kbd "C-x M-<up>") 'full-screen)
(global-set-key (kbd "C-x M-<right>") 'right-half)
(global-set-key (kbd "C-x M-<left>") 'left-half)
(global-set-key (kbd "C-x M-<down>") 'down-half)
(global-set-key (kbd "C-x C-M-p") 'full-screen)
(global-set-key (kbd "C-x C-M-f") 'right-half)
(global-set-key (kbd "C-x C-M-b") 'left-half)
(global-set-key (kbd "C-x C-M-n") 'down-half)
(global-set-key (kbd "C-h C-c") 'full-screen)
(global-set-key (kbd "C-x k") 'kill-current-buffer)
(global-set-key (kbd "C-x w") 'smart-delete-window)
(global-set-key (kbd "C-x C-w") 'smart-close-window)
(global-set-key (kbd "C-h C-w") 'smart-close-window)
(global-set-key (kbd "M-<f4>") 'smart-close-window)
(global-set-key (kbd "C-x C-#") 'server-edit);same as C-x #
(global-set-key (kbd "C-x M-f") 'windmove-right)
(global-set-key (kbd "C-x M-b") 'windmove-left)
(global-set-key (kbd "C-x M-p") 'windmove-up)
(global-set-key (kbd "C-x M-n") 'windmove-down)
(global-set-key (kbd "C-;") '(lambda () (interactive) (smart-other-window 1)))
(global-set-key (kbd "C-:") '(lambda () (interactive) (smart-other-window -1)))
(global-set-key (kbd "C-x o") '(lambda () (interactive) (smart-other-window 1)))
(global-set-key (kbd "C-x O") '(lambda () (interactive) (smart-other-window -1)))
(global-set-key (kbd "C-M-;") 'tabbar-backward-group)
(global-set-key (kbd "C-M-:") 'tabbar-forward-group)
(global-set-key (kbd "C-S-<tab>") 'tabbar-backward-tab)
(global-set-key (kbd "C-<tab>") 'tabbar-forward-tab)
(global-set-key (kbd "M-c b b") 'buf-move-left)
(global-set-key (kbd "M-c b f") 'buf-move-right)
(global-set-key (kbd "M-c b p") 'buf-move-up)
(global-set-key (kbd "M-c b n") 'buf-move-down)
(global-set-key (kbd "C-c C-m") 'switch-to-minibuffer-window)
(global-set-key (kbd "C-x r v") 'view-register)
(global-set-key (kbd "M-p") (lambda (&optional n) (interactive "p") (scroll-down (or n 1))))
(global-set-key (kbd "M-n") (lambda (&optional n) (interactive "p") (scroll-up (or n 1))))
(global-set-key (kbd "C-<apps>") '(lambda () "bindings.el" (interactive) (forward-line)))
;(global-set-key (kbd "C-<down>") '(lambda () "bindings.el" (interactive) (next-logical-line 1)))
;(global-set-key (kbd "C-<down>") '(lambda () "bindings.el" (interactive) (forward-line)))
(global-set-key (kbd "C-c C-n") 'half-screen-down)
(global-set-key (kbd "C-c C-p") 'half-screen-up)(global-set-key (kbd "M-c M-n") 'half-screen-down)
(global-set-key (kbd "M-c M-h") 'half-screen-up)
(global-set-key (kbd "C-S-c C-S-h") 'half-screen-up)
(global-set-key (kbd "C-c C-S-h") 'half-screen-up)
(global-set-key (kbd "C-c C-h") 'half-screen-up)
(global-set-key (kbd "C-S-c C-S-n") 'half-screen-down)
(global-set-key (kbd "C-c C-S-n") 'half-screen-down)
(global-set-key (kbd "C-S-n") (lambda () (interactive) (ignore-errors (next-line 5))))
(global-set-key (kbd "C-S-p") (lambda () (interactive) (ignore-errors (previous-line 5))))
(global-set-key (kbd "C-S-f") (lambda () (interactive) (ignore-errors (forward-char 5))))
(global-set-key (kbd "C-S-b") (lambda () (interactive) (ignore-errors (backward-char 5))))
(global-set-key (kbd "C-c SPC") 'ace-jump-mode)
(global-set-key (kbd "C-M-g") 'ace-jump-mode)
(global-set-key (kbd "C-t") 'transpose-chars)
(global-set-key (kbd "C-S-t") '(lambda () (interactive) (transpose-chars -1)))
(global-set-key (kbd "M-t") 'transpose-words)
(global-set-key (kbd "M-T") '(lambda () (interactive) (transpose-words -1)))
(global-set-key (kbd "C-M-t") (lambda () (interactive) (transpose-sexps 1)))
(global-set-key (kbd "C-M-S-t") (lambda () (interactive) (transpose-sexps -1)))
(global-set-key (kbd "M-c +") '(lambda () (interactive) (text-scale-adjust 1)))
(global-set-key (kbd "M-c -") '(lambda () (interactive) (text-scale-adjust -1)))
(global-set-key (kbd "C-<kp-add>") 'text-scale-increase)
(global-set-key (kbd "C-<kp-subtract>") 'text-scale-decrease)
(global-set-key (kbd "C-<kp-0>") '(lambda () (interactive)
				    (text-scale-adjust (- text-scale-mode-amount))
				    (text-scale-mode -1)))
(global-set-key (kbd "C-<wheel-up>") 'text-scale-increase)
(global-set-key (kbd "C-<wheel-down>") 'text-scale-decrease)
(global-set-key (kbd "<mouse-2>") '(lambda () (interactive)
				     (text-scale-adjust (- text-scale-mode-amount))
				     (text-scale-mode -1)))
(global-set-key (kbd "M-c 0") '(lambda () (interactive)
				 (text-scale-adjust (- text-scale-mode-amount))
				 (text-scale-mode -1)))
(global-set-key "\M-h" 'my-flyspell-auto-correct-word)
(global-set-key "\M-H" 'flyspell-auto-correct-word)
(global-set-key (kbd "M-c M-%") 'replace-regexp)
(global-set-key (kbd "M-c M-&") 'replace-string)
(global-set-key (kbd "M-c M-SPC") 'xmsi-change-to-symbol)
(global-set-key "\M-j" (lambda () (interactive) (join-line) (indent-for-tab-command)))
(global-set-key (kbd "M-<return>") 'newline-and-indent)
(global-set-key (kbd "C-c d") 'delete-indentation)
(global-set-key (kbd "M-c M-c") 'comment-or-uncomment-region)
(global-set-key (kbd "C-x M-c") 'capitalize-word)
(global-set-key (kbd "M-c SPC") 'capitalize-word)
(global-set-key (kbd "M-c c") 'capitalize-word)
(global-set-key (kbd "H-.") 'mc/mark-next-like-this)
(global-set-key (kbd "H-,") 'mc/mark-previous-like-this)
(global-set-key (kbd "H-;") 'mc/mark-all-like-this)
(global-set-key (kbd "C-H-SPC") 'set-rectangular-region-anchor)
(global-set-key (kbd "C-S-c C-S-c") 'mc/edit-lines)
(global-set-key (kbd "C-x i f") 'ido-insert-file)
(global-set-key (kbd "C-x i c") 'atob)
(global-set-key (kbd "C-x i r") 'insert-register)
(global-set-key (kbd "M-c M-d") 'today)
(global-set-key (kbd "M-c M-t") 'now)
(global-set-key (kbd "M-c q") 'qdnt)
(global-set-key (kbd "M-c M-q") 'push-time)
(global-set-key (kbd "M-c d n t b s") 'dntbs)
(global-set-key (kbd "C-c M-l") 'toggle-truncate-lines)
(global-set-key (kbd "M-c M-@") 'copy-sexp)
(global-set-key (kbd "M-g") 'goto-line-with-feedback)
(fset 'delete-line [C-S-backspace])
(global-set-key (kbd "C-c C-k") 'delete-line)
(global-set-key (kbd "M-k") 'sci-copy-line)
(global-set-key (kbd "C-c M-r") 'recursive-edit)
(global-set-key (kbd "C-x <return> w") 'wdired-change-to-wdired-mode)
(global-set-key (kbd "C-<f2>") 'wdired-change-to-wdired-mode)
(global-set-key (kbd "C-x <return> u") 'ucs-insert)
(global-set-key (kbd "C-x <return> r") 'revert-buffer-with-coding-system)
(global-set-key (kbd "C-x C-r") 'toggle-read-only)
(global-set-key (kbd "C-x M-w") 'write-file)
(global-set-key (kbd "C-x u") 'undo)
(global-set-key (kbd "C-_") 'undo)
(global-set-key (kbd "C-M-_") 'undo)
(global-set-key (kbd "C-x C-b") '(lambda () "use ibuffer in bindings.el" (interactive) (ibuffer t)))
(global-set-key (kbd "C-c C-,") 'my-base64-encode-region)
(global-set-key (kbd "C-c C-.") 'my-base64-decode-region)
(global-set-key (kbd "C-.") 'previous-line)
(global-set-key (kbd "<apps> l") 'linum-mode)
(global-set-key (kbd "<apps> m c") 'minimap-create)
(global-set-key (kbd "<apps> m k") 'minimap-kill)
(global-set-key (kbd "<apps> p") 'paredit-mode)
(global-set-key (kbd "<apps> t") 'tabbar-mode)
(global-set-key (kbd "<scroll> a") 'empty-command)
(fset 'copy-sexp "\200\367")
(defun empty-command ()
  "This is an empty command"
  (interactive)
  (message "empty-command"))



C-M-f	paredit-forward
(foo |(bar baz) quux)
  --->
(foo (bar baz)| quux)

(foo (bar)|)
  --->
(foo (bar))|


C-M-b	paredit-backward
(foo (bar baz)| quux)
  --->
(foo |(bar baz) quux)

(|(foo) bar)
  --->
|((foo) bar)


C-M-u	paredit-backward-up
  (no examples)


C-M-d	paredit-forward-down
  (no examples)


C-M-p	paredit-backward-down
  (no examples)


C-M-n	paredit-forward-up
  (no examples)


Depth-Changing Commands


M-(	paredit-wrap-round
(foo |bar baz)
  --->
(foo (|bar) baz)


M-s	paredit-splice-sexp
(foo (bar| baz) quux)
  --->
(foo bar| baz quux)


<M-up>	paredit-splice-sexp-killing-backward
(foo (let ((x 5)) |(sqrt n)) bar)
  --->
(foo |(sqrt n) bar)


<M-down>	paredit-splice-sexp-killing-forward
(a (b c| d e) f)
  --->
(a b c| f)


M-r	paredit-raise-sexp
(dynamic-wind in (lambda () |body) out)
  --->
(dynamic-wind in |body out)
  --->
|body


M-?	paredit-convolute-sexp
(let ((x 5) (y 3)) (frob |(zwonk)) (wibblethwop))
  --->
(frob |(let ((x 5) (y 3)) (zwonk) (wibblethwop)))


Barfage & Slurpage


<C-right>	paredit-forward-slurp-sexp
(foo (bar |baz) quux zot)
  --->
(foo (bar |baz quux) zot)

(a b ((c| d)) e f)
  --->
(a b ((c| d) e) f)


<C-M-right>	paredit-forward-barf-sexp
(foo (bar |baz quux) zot)
  --->
(foo (bar |baz) quux zot)


C-(	paredit-backward-slurp-sexp
(foo bar (baz| quux) zot)
  --->
(foo (bar baz| quux) zot)

(a b ((c| d)) e f)
  --->
(a (b (c| d)) e f)


C-{	paredit-backward-barf-sexp
(foo (bar baz |quux) zot)
  --->
(foo bar (baz |quux) zot)


Miscellaneous Commands


M-S	paredit-split-sexp
(hello| world)
  --->
(hello)| (world)

"Hello, |world!"
  --->
"Hello, "| "world!"


M-J	paredit-join-sexps
(hello)| (world)
  --->
(hello| world)

"Hello, "| "world!"
  --->
"Hello, |world!"

hello-
|  world
  --->
hello-|world


C-c C-M-l	paredit-recenter-on-sexp
  (no examples)


M-q	paredit-reindent-defun
  (no examples)
